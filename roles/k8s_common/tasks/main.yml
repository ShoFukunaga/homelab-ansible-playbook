---
- name: Install required packages
  ansible.builtin.apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gpg
    state: present
    update_cache: yes

- name: Load kernel modules
  ansible.builtin.copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter
    mode: '0644'

- name: Load overlay module
  community.general.modprobe:
    name: overlay
    state: present

- name: Load br_netfilter module
  community.general.modprobe:
    name: br_netfilter
    state: present

- name: Configure sysctl parameters
  ansible.builtin.copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward                 = 1
    mode: '0644'
  notify: Reload sysctl

- name: Disable swap
  ansible.builtin.command: swapoff -a
  changed_when: true

- name: Remove swap from fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: Create keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Add Docker GPG key
  ansible.builtin.apt_key:
    url: "{{ docker_apt_gpg_key }}"
    keyring: /etc/apt/keyrings/docker.gpg
    state: present

- name: Add Docker repository
  ansible.builtin.apt_repository:
    repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present
    filename: docker

- name: Install containerd
  ansible.builtin.apt:
    name: containerd.io
    state: present
    update_cache: yes

- name: Create containerd config directory
  ansible.builtin.file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Generate default containerd configuration
  ansible.builtin.shell: containerd config default
  register: containerd_config
  changed_when: false

- name: Write containerd configuration
  ansible.builtin.copy:
    dest: "{{ containerd_config_file }}"
    content: "{{ containerd_config.stdout }}"
    mode: '0644'

- name: Enable SystemdCgroup in containerd
  ansible.builtin.replace:
    path: "{{ containerd_config_file }}"
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  notify: Restart containerd

- name: Enable and start containerd
  ansible.builtin.systemd:
    name: containerd
    enabled: yes
    state: started

- name: Add Kubernetes GPG key
  ansible.builtin.apt_key:
    url: "{{ kubernetes_apt_gpg_key }}"
    keyring: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    state: present

- name: Add Kubernetes repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] {{ kubernetes_apt_repo }} /"
    state: present
    filename: kubernetes

- name: Install Kubernetes packages
  ansible.builtin.apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Hold Kubernetes packages
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl

- name: Enable and start kubelet
  ansible.builtin.systemd:
    name: kubelet
    enabled: yes
    state: started

- name: Configure crictl
  ansible.builtin.copy:
    dest: "{{ crictl_config_file }}"
    content: |
      runtime-endpoint: unix:///var/run/containerd/containerd.sock
      image-endpoint: unix:///var/run/containerd/containerd.sock
      timeout: 10
    mode: '0644'
